//grid mixin
$max: 12;

@mixin grid($screen) {
  @for $i from 1 through $max {
    .col-#{$screen}--#{$max} {
      flex-basis: percentage($max / 12);
      max-width: percentage($max / 12);
      width: percentage($max / 12);
    }

    $max: $max - 1;
  }
}

/* media query
-----------------------------------------------------------*/
@mixin for-size($size) {
  @if $size==phone-only {
    @media (max-width: 767px) {
      @content;
    }
  } @else if $size==not-phone {
    @media (min-width: 768px) {
      @content;
    }
  } @else if $size==tablet-only {
    @media (min-width: 768px) and (max-width: 992px) {
      @content;
    }
  } @else if $size==desktop-medium {
    @media (min-width: 993px) and (max-width: 1320px) {
      @content;
    }
  } @else if $size==tablet-down {
    @media (max-width: 992px) {
      @content;
    }
  } @else if $size==desktop-small {
    @media (max-width: 1320px) {
      @content;
    }
  } @else if $size==desktop-big {
    @media (min-width: 1321px) {
      @content;
    }
  } @else if $size==desktop {
    @media (min-width: 993px) {
      @content;
    }
  }
}

// Minimum breakpoint width.
@function breakpoint-min($name, $breakpoints: $grid-breakpoints) {
  $min: map-get($breakpoints, $name);
  @return if($min !=0, $min, null);
}

@function breakpoint-infix($name, $breakpoints: $grid-breakpoints) {
  @return if(breakpoint-min($name, $breakpoints) ==null, "", "-#{$name}");
}

@mixin media-breakpoint-up($name, $breakpoints: $grid-breakpoints) {
  $min: breakpoint-min($name, $breakpoints);

  @if $min {
    @media (min-width: $min) {
      @content;
    }
  } @else {
    @content;
  }
}

// css triangle
@mixin triangle($direction: down, $size: 5px, $color: #000) {
  width: 0;
  height: 0;
  @if ($direction == left) {
    border-top: $size solid transparent;
    border-bottom: $size solid transparent;
    border-right: $size solid $color;
  } @else if ($direction == right) {
    border-top: $size solid transparent;
    border-bottom: $size solid transparent;
    border-left: $size solid $color;
  } @else if ($direction == down) {
    border-left: $size solid transparent;
    border-right: $size solid transparent;
    border-top: $size solid $color;
  } @else {
    border-left: $size solid transparent;
    border-right: $size solid transparent;
    border-bottom: $size solid $color;
  }
}

// flex center
@mixin flex-center {
  display: flex;
  align-items: center;
  justify-content: center;
}

// flex center vertical
@mixin flex-center-vertical {
  display: flex;
  align-items: center;
}

// flex center horizontal
@mixin flex-center-horizontal {
  display: flex;
  justify-content: center;
}

//placeholder
@mixin placeholder {
  &::-webkit-input-placeholder {
    @content;
  }

  &:-moz-placeholder {
    @content;
  }

  &::-moz-placeholder {
    @content;
  }

  &:-ms-input-placeholder {
    @content;
  }
}

// truncate
@mixin truncate($truncation-boundary) {
  max-width: $truncation-boundary;
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
}

// size
@mixin size($width, $height: $width) {
  width: $width;
  height: $height;
}

// calculateRem
@function calculateRem($size) {
  $remSize: $size / $rootFontSize;
  @return #{$remSize}rem;
}

// fontSize
@mixin fontSize($size) {
  font-size: $size;
  font-size: calculateRem($size);
}

// ratio
@function ratio($size) {
  $size: $size * $spacer;
  @return #{$size}px;
}

// gutter
@mixin gutter($prop, $num) {
  $prop: ratio($num);
}
